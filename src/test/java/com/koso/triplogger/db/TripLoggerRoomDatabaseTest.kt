package com.koso.triplogger.dbimport android.content.Contextimport androidx.room.Roomimport androidx.test.core.app.ApplicationProviderimport androidx.test.ext.junit.runners.AndroidJUnit4import kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.launchimport kotlinx.coroutines.newSingleThreadContextimport kotlinx.coroutines.test.resetMainimport kotlinx.coroutines.test.setMainimport org.junit.Afterimport org.junit.Beforeimport org.junit.Testimport org.junit.runner.RunWith@RunWith(AndroidJUnit4::class)class TripLoggerRoomDatabaseTest {    private lateinit var datasetDao: DataSetRawDao    private lateinit var tripDao: TripRawDao    private lateinit var db: TripLoggerRoomDatabase    private val mainThreadSurrogate = newSingleThreadContext("UI thread")    @Before    fun setUp() {        val context = ApplicationProvider.getApplicationContext<Context>()        Dispatchers.setMain(mainThreadSurrogate)        db = Room.inMemoryDatabaseBuilder(            context, TripLoggerRoomDatabase::class.java).build()        datasetDao = db.datasetDao()        tripDao = db.tripDao()    }    @After    fun tearDown() {        db.close()        Dispatchers.resetMain() // reset main dispatcher to the original Main dispatcher    }    @Test    fun testDb(){        GlobalScope.launch(Dispatchers.Main) {  // Will be launched in the mainThreadSurrogate dispatcher            try {                println("1232323")                val raw = TripRaw(                    starttime = 0,                    endtime = 1,                    filename = "abc.trip",                    distance = 0,                    note = ""                )                tripDao.insert(raw)                println("333333")                listAll()            }catch (e: Exception){                println(e.message)            }        }    }    private suspend fun listAll() {        val list = tripDao.getAllSuspend()        for(r in list){            println("${r.id},${r.remoteid},${r.user},${r.reference}")        }    }}