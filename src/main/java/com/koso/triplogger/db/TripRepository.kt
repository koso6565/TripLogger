package com.koso.triplogger.dbimport android.content.Contextimport androidx.lifecycle.LiveDataimport com.koso.triplogger.io.TripFileHelperimport com.koso.triplogger.model.Tripimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.withContextclass TripRepository private constructor(private val dao: TripRawDao) {    companion object {        private var instance: TripRepository? = null        fun getInstance(context: Context): TripRepository {            return instance ?: TripRepository(TripLoggerRoomDatabase.getDatabase(context).tripDao())        }    }    val allTrips: LiveData<List<TripRaw>> = dao.getAllLiveData()    suspend fun getAllSuspend() = withContext(Dispatchers.IO) { dao.getAllSuspend() }    suspend fun insert(trip: TripRaw) = withContext(Dispatchers.IO) {        dao.insert(trip)    }    suspend fun delete(context: Context, trip: TripRaw) {        withContext(Dispatchers.IO) {            TripFileHelper.deleteFile(context, trip.filename)            dao.delete(trip)        }    }    suspend fun delete(context: Context, trip: Trip) {        withContext(Dispatchers.IO) {            TripFileHelper.deleteFile(context, trip.filename!!)            dao.deleteById(trip.id)        }    }    suspend fun update(trip: Trip) {        withContext(Dispatchers.IO) {            dao.update(TripRaw.fromTrip(trip.filename!!, trip))        }    }    suspend fun update(raw: TripRaw){        dao.update(raw)    }    suspend fun findTripByTime(start: Long, end: Long): List<TripRaw> {        return withContext(Dispatchers.IO) {            dao.findByTime(start, end)        }    }    suspend fun clearAll() {        return withContext(Dispatchers.IO){            dao.deleteAll()        }    }}